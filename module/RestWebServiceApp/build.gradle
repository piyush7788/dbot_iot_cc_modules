apply from: ('../../gradlescript/common_war.gradle')

sourceSets {
    main {
        // Adding all xsd related java classes
        java.srcDirs 'src', 'src_gen'
    }
    test {
        resources.srcDirs 'src_test', 'build/config/env/local'
    }
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    xjc
    wsdl2javaConfig
}

configurations.all {
    resolutionStrategy {
        // add a dependency resolve rule
        eachDependency { details ->
            if (details.requested.group == 'log4j' && details.requested.name == 'log4j') {
                details.useTarget group: 'org.apache.logging.log4j', name: 'log4j-core', version: '1.3-alpha8'
            }
        }
    }
}

//CC-93409 tomcat9
configurations {
    all {
        resolutionStrategy {
            dependencySubstitution {
                it.substitute it.module('javax.ws.rs:jsr311-api:1.0') with it.module('javax.ws.rs:javax.ws.rs-api:2.0.1')
                it.substitute it.module('javax.ws.rs:jsr311-api:1.1.1') with it.module('javax.ws.rs:javax.ws.rs-api:2.0.1')
                 }
        }
    }
}

task wsdl2javaConfig {
    doLast {
        ant.properties['classpath'] = configurations.wsdl2javaConfig.asPath
    }
}

task xjc (dependsOn: wsdl2javaConfig) {
    doLast {
        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)
    }
}

test{

}

dependencies {
    wsdl2javaConfig fileTree(dir: System.getenv()['CATALINA_HOME']+'/lib', include: ['*.jar'])
    wsdl2javaConfig fileTree(dir: System.getenv()['CATALINA_HOME']+'/bin', include: ['*.jar'])
    wsdl2javaConfig(group: 'atg.taglib', name: 'json-taglib', version: '0.4.1')
    wsdl2javaConfig(group: 'taglibs', name: 'standard', version: '1.1.2')
    wsdl2javaConfig(group: 'apache-taglibs', name: 'jstl', version: '1.1.2')
    wsdl2javaConfig(group: 'org.springframework.security', name: 'spring-security-taglibs', version: '3.1.2.RELEASE')

    xjc(group: 'javax.xml.bind', name: 'jaxb-api', version: '2.1')
    xjc(group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.1')
    xjc(group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.1')

    compile project(':control-center')
    compile project(':diagnostics')
    compile project(':provision')
    compile project(':web-service')
    compile project(':throttling')
    compile project(':core')
    compile project(':core-prime')
    compile project(':billing')
    compile project(':sms')
    compile project(':flexible-billing')
    compile project(':jw-vault')

    if (!localModule.contains("ExternalProvisionDomain")) {
        compile(group: 'com.jasperwireless', name: 'external-provision', version: '1.0.+', changing: true)
    } else {
        // Default buildMode is local
        compile project(':external-provision')
    }

    if (!localModule.contains("ESimDomain")) {
        compile(group: 'com.jasperwireless', name: 'e-sim', version: '1.0.+', changing: true)
    } else {
        compile project(':e-sim')
    }

    compile 'org.glassfish.jersey.core:jersey-server:2.20'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'io.swagger:swagger-jersey2-jaxrs:1.5.0'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.10'
    compile 'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.7.3'

    compile 'com.fasterxml.jackson.core:jackson-core:2.9.10'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.10.8'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.10'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.9.9'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.9'
    compile 'com.fasterxml.jackson.module:jackson-modules-base:2.9.9'

    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.20.1'
    compile 'org.glassfish.jersey.core:jersey-common:2.20'
    compile 'org.glassfish.jersey.ext:jersey-entity-filtering:2.20'
    compile 'org.glassfish.jersey.ext:jersey-bean-validation:2.20'

    compile group: 'com.jasperwireless', name: 'jasper-logger', version: '1.0.+'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j-jasper', version: '0.+'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.4.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.4.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.4.1'
	compile ('org.glassfish.jersey.ext:jersey-spring3:2.20') {
        transitive = false
    }
    compile(group: 'org.glassfish.hk2', name: 'spring-bridge', version: '2.4.0-b27') {
        transitive = false
    }
    compile(group: 'commons-validator', name: 'commons-validator', version: '1.6'){
        transitive = false
    }
    testCompile 'org.glassfish.jersey.test-framework:jersey-test-framework-core:2.20'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.20'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'

    runtime(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.20')
    runtime(group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.20')
    runtime(group: 'net.lag', name: 'configgy', version: '1.3')
    runtime(group: 'commons-discovery', name: 'commons-discovery', version: '0.5')
    runtime(group: 'wsdl4j', name: 'wsdl4j', version: '1.6.1')
    runtime(group: 'org.hibernate.common', name: 'hibernate-commons-annotations', version: '4.0.1.Final')
    runtime(group: 'org.hibernate', name: 'hibernate-validator-annotation-processor', version: '4.2.0.Final')
    runtime(group: 'com.jasperwireless', name: 'service-registry', version: '1.0.+') {
        exclude group: 'com.jasperwireless', module: 'core'
        exclude group: 'com.jasperwireless', module: 'core-prime'
    }
    runtime project(':service-invocation-common')
    runtime project(':search-client')
    
}

configurations {
    testCompile.exclude group: 'com.sun.jersey', module: 'jersey-core'
    testCompile.exclude group: 'com.sun.jersey', module: 'jersey-client'
}

// Jasper customized steps for packaging WAR file
task copyWarResources(type: Copy) {
    from('web') {
        exclude 'META-INF/**', 'WEB-INF/**'
    }

    fileMode 0755

    into 'build/warResources'
}

webAppDirName = 'build/warResources'
war {
    from('web/META-INF') {
        into 'META-INF'
    }

    from('web/WEB-INF') {
        exclude 'web.xml', 'jsp/**', '**/*.jsp'
        into 'WEB-INF'
    }

    webXml = file('web/WEB-INF/web.xml')
}

// Old Ant build
ant.importBuild 'ant-build.xml'
preCompile.dependsOn(xjc)
compileJava.dependsOn(preCompile)
processResources.dependsOn(copyProperties)
war.dependsOn(copyWarResources)
